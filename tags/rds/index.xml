<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>rds on Vladimir Samoylov</title><link>https://cageyv.dev/tags/rds/</link><description>Recent content in rds on Vladimir Samoylov</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 21 Nov 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://cageyv.dev/tags/rds/index.xml" rel="self" type="application/rss+xml"/><item><title>MVP on AWS: PostgreSQL</title><link>https://cageyv.dev/posts/aws-mvp-postgresql/</link><pubDate>Thu, 21 Nov 2024 00:00:00 +0000</pubDate><guid>https://cageyv.dev/posts/aws-mvp-postgresql/</guid><description>Why PostgreSQL? Link to heading Let&amp;rsquo;s assume that you already decided on PostgreSQL as your database. Why? Because it is a powerful, open-source object-relational database system with over 30 years of active development, correct? We will leave the problem of where and how to store data for another time.
RDS Aurora (PostgreSQL Compatible) or RDS PostgreSQL Link to heading If there are no specific requirements, we may select Aurora as the default option.</description></item><item><title>AWS RDS Data API and CloudTrail. Who drop the table?</title><link>https://cageyv.dev/posts/aws-rds-data-api/</link><pubDate>Thu, 04 Jan 2024 00:00:00 +0000</pubDate><guid>https://cageyv.dev/posts/aws-rds-data-api/</guid><description>Introduction Link to heading Amazon Web Services (AWS) continually innovates to enhance user experience and efficiency. A prime example of this is the recent update to the RDS Data API, particularly for Amazon Aurora PostgreSQL-Compatible Edition. This update is a game-changer, as it offers users the ability to access Aurora clusters via a secure HTTP endpoint. The key here is the removal of rate limits and the elimination of the need for database drivers and managing connections.</description></item></channel></rss>